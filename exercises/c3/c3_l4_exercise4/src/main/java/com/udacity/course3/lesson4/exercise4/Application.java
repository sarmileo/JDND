package com.udacity.course3.lesson4.exercise4;

import com.mongodb.MongoCommandException;
import com.mongodb.client.*;
import com.mongodb.client.model.Filters;
import com.mongodb.client.result.DeleteResult;
import com.mongodb.client.result.UpdateResult;
import org.bson.Document;
import org.bson.types.ObjectId;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Logger;

public class Application {
    private static Logger log = Logger.getAnonymousLogger();

    public static void main(String[] args) {
        // STEP 1: Craft the URI to connect to your local MongoDB server
        // Host: localhost
        // Port: 27017 (default)
        // Username: course3
        // Password: course3
        // DB: jdnd-c3
        // Mongodb initialization parameters.
        int port_no = 27017;
        String host_name = "localhost", db_name = "jdnd-c3", db_coll_name = "members";
        String username = "course3", password = "course3";

        // Mongodb connection string.
        //String uri = "mongodb://course3:course3@localhost:27017/jdnd-c3";
        String client_url = "mongodb://" + username + ":" + password + "@" + host_name + ":" + port_no + "/" + db_name;

        // STEP 2: Create a MongoClient
        MongoClient mongoClient = MongoClients.create(client_url);

        // STEP 3: Select the jdnd-c3 database to work with
        MongoDatabase database = mongoClient.getDatabase("jdnd-c3");

        //	Create a collection named members.
        try
        {
            database.createCollection(db_coll_name);
        } catch (MongoCommandException e)
        {
            System.err.println("Collection not created: " + e.getErrorMessage());
        }

        // Get Collection
        MongoCollection<Document> members = database.getCollection(db_coll_name);

        /**
         * Perform all the steps listed in the exercise
         * **/

        //1.Insert a member document with no _id field but include all the other fields.
        //	Print the inserted document to see if id is generated by the database.
        /** Sample document: **/
/**        "first_name": "Carl",
                "last_name": "Jenkins",
                "gender": "male",
                "age": 23,
                "address": {
                    "street": "123 Main Street",
                    "city": "Oakland",
                    "state": "CA"
                },
        "interests": ["pilates","swim","crossfit"],
        "balance": 125.20 **/

//        Document member1 = new Document()
//                .append("first_name", "Jonny")
//                .append("last_name", "Beta")
//                .append("gender", "male")
//                .append("age", 34);
//        Document memberAddress = new Document()
//                .append("street", "123 Main Street")
//                .append("city", "Oakland")
//                .append("state", "CA");
//        member1.put("address", memberAddress);
//
//        members.insertOne(member1);

        printCollection(members);

        //2.Insert a member document with all the fields including _id. Print the inserted document to see if id is NOT overwritten by the database.
        //insertMemberWithId(members);
        //printCollection(members);

        //3.Insert 3 member documents using one insert.
        //insertThreeMembers(members);
        //printCollection(members);

        //4.Update the name of the field gender to sex in all the inserted documents.
        updateMemberField(members);

        //5.Delete a document using its _id.
        deleteDocument("5e6095472ea721bc9c1a77a7", members);
        printCollection(members);

        //6.Delete just one document whose sex is male. Tip: This requires you to look through the MongoDB driver documentation to find the right command.
        deleteWithFieldValue("male", members);
        printCollection(members);

        // IMPORTANT: Make sure to close the MongoClient at the end so your program exits.
        mongoClient.close();
    }

    public static void printCollection(MongoCollection<Document> collection)
    {
        System.out.println("\n Printing collection members total : " + collection.countDocuments());
        MongoCursor<Document> cursor = collection.find().iterator();
        try {
            while (cursor.hasNext()) {
                System.out.println(cursor.next().toJson());
            }
        } finally {
            cursor.close();
        }
    }

    public static void insertMemberWithId(MongoCollection<Document> collection)
    {
        Document member1 = new Document()
                .append("_id", "mLeo30")
                .append("first_name", "Leo")
                .append("last_name", "Sarmi")
                .append("gender", "male")
                .append("age", 35);
        Document memberAddress = new Document()
                .append("street", "456 Second Street")
                .append("city", "Miami")
                .append("state", "FL");
        member1.put("address", memberAddress);

        collection.insertOne(member1);
    }

    public static void insertThreeMembers(MongoCollection<Document> collection)
    {
        List<Document> docList = new ArrayList<>();

        Document member1 = new Document()
                .append("first_name", "Michael")
                .append("last_name", "Jourdan")
                .append("gender", "male")
                .append("age", 40);
        Document member1Address = new Document()
                .append("street", "456 Second Street")
                .append("city", "Miami")
                .append("state", "FL");
        member1.put("address", member1Address);

        Document member2 = new Document()
                .append("first_name", "Duke")
                .append("last_name", "Hernandez")
                .append("gender", "male")
                .append("age", 54);
        Document member2Address = new Document()
                .append("street", "456 Second Street")
                .append("city", "Miami")
                .append("state", "FL");
        member2.put("address", member2Address);

        Document member3 = new Document()
                .append("first_name", "Yassiel")
                .append("last_name", "Puig")
                .append("gender", "male")
                .append("age", 30);
        Document member3Address = new Document()
                .append("street", "789 Second Street")
                .append("city", "Miami")
                .append("state", "FL");
        member3.put("address", member3Address);

        docList.addAll(Arrays.asList(member1, member2, member3));

        collection.insertMany(docList);
    }

    public static void updateMemberField(MongoCollection<Document> collection)
    {
        UpdateResult updateResult = collection
                .updateMany(Filters.exists("gender", true), new Document("$rename",  new Document("gender", "sex")));
        log.info("Records updated? = " + updateResult.getModifiedCount() + "\n");
    }

    public static void deleteDocument(String id, MongoCollection<Document> collection)
    {
        DeleteResult deleteResult = collection.deleteOne(new Document("_id", new ObjectId(id)));
        if (deleteResult.getDeletedCount() != 0)
        {
            log.info("Document with id :" + id + " deleted \n");
            log.info("Records deleted? = " + deleteResult.getDeletedCount() + "\n");
        }
        else
        {
            log.info("Document with id :" + id + " DOES NOT EXIST \n");
        }
    }

    public static void deleteWithFieldValue(String fieldValue, MongoCollection<Document> collection)
    {
        DeleteResult deleteResult = collection.deleteOne(new Document("sex", fieldValue));
        if (deleteResult.getDeletedCount() != 0)
        {
            log.info("Document with sex " + fieldValue + " deleted \n");
            log.info("Records deleted? = " + deleteResult.getDeletedCount() + "\n");
        }
        else
        {
            log.info("Document with sex :" + fieldValue + " DOES NOT EXIST \n");
        }
    }

}